# Form implementation generated from reading ui file 'form.ui'
#
# Created by: PyQt6 UI code generator 6.4.2
#
# WARNING: Any manual changes made to this file will be lost when pyuic6 is
# run again.  Do not edit this file unless you know what you are doing.

import sys

import openai
from PyQt6 import QtWidgets
from PySide6.QtWidgets import QApplication

sys.path.append("..")
sys.path.append("../..")

from Ui_MainWindow import Ui_MainWindow
from Util import GptUtil


class MainWindow(QtWidgets.QMainWindow, Ui_MainWindow):
    def __init__(self, *args, obj=None, **kwargs):
        super(MainWindow, self).__init__(*args, **kwargs)
        self.setupUi(self)

        self.SendTextButton.clicked.connect(self.onSendTextButtonClicked)
        GptUtil.initOpenai()
        self.tokenCounter = GptUtil.tokenCounter()

    def onSendTextButtonClicked(self, checked):
        self.receiveGptResponse(self.textEdit.toPlainText())
        self.textEdit.clear()

    def receiveGptResponse(self, message):
        # construct the messages to be sent
        currentRole = self.comboBoxGptRole.currentText()
        match currentRole:
            case "Translator":
                message = "Please translate the following sentence into English:\n" + message
            case "English Teacher":
                message = "Please find the grammar issues of the following sentence:\n" + message
            case "Contex-free Conversation":
                pass
            case _:
                raise Exception(f"{currentRole} is not a valid role.")

        messages = [{"role": "user", "content": message}]

        completion = openai.ChatCompletion.create(
            model="gpt-3.5-turbo",
            messages=messages
        )
        #
        responses = [completion.choices[i].message for i in range(completion.choices.__len__())]
        response = responses[0].content
        self.responseTextBrowser.setText(response)
        print("Response:\n", response)
        # overallTokens = self.tokenCounter.count(messages) + self.tokenCounter.count(responses)
        print("Overall token num: ", completion.usage["total_tokens"])


if __name__ == '__main__':
    app = QApplication(sys.argv)
    window = MainWindow()
    window.show()
    app.exec()
